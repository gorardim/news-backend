"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Me"
    me: User @auth
    "List of All categories."
    categories: [Category!]! @all

    "List of All sources."
    sources: [Source!]! @all

    "List of All articles."
    articles(
        "Search by keyword in title, author, description, content, and published_at."
        search: String
        "Filters by source id."
        source_id: ID @eq
        "Filters by category id."
        category_id: ID @eq
        "page number"
        page: Int
        "number of items per page"
        first: Int
    ): ArticlePaginator!
}

type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type ArticlePaginator {
    data: [Article!]!
    paginatorInfo: PaginatorInfo!
}

type PaginatorInfo {
    count: Int!
    currentPage: Int!
    perPage: Int!
    total: Int!
    lastPage: Int!
}

type Article {
    id: ID!
    category: Category!
    source: Source!
    author: String
    title: String!
    description: String
    url: String!
    url_to_image: String
    published_at: String
    content: String
}

type Category {
    id: ID!
    name: String!
}

# 'source_id', 'name',
type Source {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!
}

type LoginResponse {
    token: String
    user: User
}

type Mutation {
    register(
        "The name of the user."
        name: String!
        "The email of the user. Must be unique. Must be a valid email address."
        email: String! @rules(apply: ["email", "unique:users"])
        "The password of the user. minimum 6 characters long. must match password_confirmation."
        password: String! @rules(apply: ["confirmed", "min:6"])
        "The password confirmation."
        password_confirmation: String!
    ): LoginResponse @field(resolver: "App\\GraphQL\\Mutations\\Register")

    login(
        "The email of the user."
        email: String!
        "The password of the user."
        password: String!
    ): LoginResponse @field(resolver: "App\\GraphQL\\Mutations\\Login")

    updateProfile(
        "The name of the user."
        name: String!
        "The email of the user. Must be a valid email address."
        email: String! @rules(apply: ["email"])
    ): User @field(resolver: "App\\GraphQL\\Mutations\\UpdateProfile")

    updatePassword(
        "The current password of the user."
        current_password: String!
        "The new password of the user. minimum 6 characters long. must match password_confirmation."
        password: String! @rules(apply: ["confirmed", "min:6"])
        "The new password confirmation."
        password_confirmation: String!
    ): User @field(resolver: "App\\GraphQL\\Mutations\\UpdatePassword")
}
